import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import type { PayloadAction } from '@reduxjs/toolkit'
import { RootState } from '../store';
import { fetchName, fetchNameLength } from '../../services/getName';

interface NameState {
  name: string;
  nameLength: number;
  status: boolean;
}

const initialState = { name: '' } as NameState;


const userSlice = createSlice({
  name: 'counter',
  initialState,
  reducers: {
    setName(state, action: PayloadAction<string>) {
      state.name = action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(setNameAsync.pending, (state) => {
        state.status = false;
      })
      .addCase(setNameAsync.fulfilled, (state, action) => {
        state.status = true;
        state.name = action.payload;
      })
      .addCase(setNameLenght.fulfilled, (state, action) => {
        state.nameLength = action.payload;
      })
  },
})

export const setNameAsync = createAsyncThunk(
  'user/fetchName',
  async () => {
    const response = await fetchName()
    // The value we return becomes the `fulfilled` action payload
    return response.name
  }
)

export const setNameLenght = createAsyncThunk(
  'user/setNameLenght',
  async (name: string) => {
    const response = await fetchNameLength(name);
    return response
  }
)

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline as well.
export const nameSelector = (state: RootState) => state.counter.name
export const nameLength = (state: RootState) => state.counter.nameLength;

export const { setName } = userSlice.actions
export default userSlice.reducer